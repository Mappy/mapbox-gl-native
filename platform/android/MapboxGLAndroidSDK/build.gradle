apply plugin: 'com.android.library'

//apply from: '../dependencies.gradle'

//supportLibVersion = '25.2.0'
//dep.timber = 'com.jakewharton.timber:timber:4.5.1'
//dep.okhttp3 = 'com.squareup.okhttp3:okhttp:3.6.0'
//dep.lost = 'com.mapzen.android:lost:2.1.2'
//dep.mapboxJavaGeoJSON='com.mapbox.mapboxsdk:mapbox-java-geojson:2.0.0@jar'
//dep.mapboxAndroidTelemetry ='com.mapbox.mapboxsdk:mapbox-android-telemetry:2.0.0@aar'

//print "toto supportLibVersion ${supportLibVersion}\n"
//print "buildToolsVersion ${buildToolsVersion}\n"
//print "dep.timber ${dep.timber}\n"

dependencies {
    compile "com.android.support:support-annotations:25.2.0"
    compile "com.android.support:support-v4:25.2.0"
    compile "com.android.support:design:25.2.0"
    compile "com.jakewharton.timber:timber:4.5.1"
    compile "com.squareup.okhttp3:okhttp:3.6.0"
    compile "com.mapzen.android:lost:2.1.2"

    // Mapbox Android Services (GeoJSON support)
    compile("com.mapbox.mapboxsdk:mapbox-java-geojson:2.0.0@jar") {
        transitive = true
    }

    // Mapbox Android Services (Telemetry support)
    compile("com.mapbox.mapboxsdk:mapbox-android-telemetry:2.0.0@aar") {
        transitive = true
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        buildConfigField "String", "GIT_REVISION_SHORT", String.format("\"%s\"", getGitRevision())
        buildConfigField "String", "MAPBOX_VERSION_STRING", String.format("\"Mapbox/%s\"", project.VERSION_NAME)
        buildConfigField "String", "MAPBOX_EVENTS_USER_AGENT", String.format("\"MapboxEventsAndroid/%s\"", project.VERSION_NAME)
    }

    // avoid naming conflicts, force usage of prefix
    resourcePrefix 'mapbox_'

    sourceSets {
        // limit amount of exposed library resources
        main.res.srcDirs += 'src/main/res-public'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        checkAllWarnings true
        warningsAsErrors true
    }

    buildTypes {
        debug {
            jniDebuggable true
        }

        release {
            // aar proguard configuration
            shrinkResources false
            jniDebuggable false
            minifyEnabled false
            buildConfigField "String", "MAPBOX_EVENTS_USER_AGENT_BASE", new StringBuilder().append("\"").append("MapboxEventsAndroid/").append(project.VERSION_NAME).append("\"").toString()
            consumerProguardFiles 'proguard-rules.pro'
            jniDebuggable false
        }
    }
}

def getGitRevision() {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    def ref = proc.text.trim()
    return ref
}

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'commons-collections', module: 'commons-collections'
}

apply from: 'gradle-javadoc.gradle'
apply from: 'gradle-publish.gradle'
apply from: 'gradle-checkstyle.gradle'

